package org.example.mobilebackendjava.service;
import com.google.api.core.ApiFuture;
import com.google.cloud.firestore.*;
import org.example.mobilebackendjava.model.CollectionFilm;
import org.example.mobilebackendjava.model.Movie;
import org.springframework.stereotype.Service;

import java.util.ArrayList;

import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

@Service
public class CollectionFilmService {
    private final Firestore db;

    public CollectionFilmService(Firestore db) {
        this.db = db;
    }

    public List<CollectionFilm> getAllCollections() {
        try {
            CollectionReference collectionRef = db.collection("collections");
            ApiFuture<QuerySnapshot> querySnapshot = collectionRef.get();

            List<CollectionFilm> result = new ArrayList<>();
            for (DocumentSnapshot document : querySnapshot.get().getDocuments()) {
                CollectionFilm collection = document.toObject(CollectionFilm.class);
                // N·∫øu b·∫°n mu·ªën set ID th·ªß c√¥ng t·ª´ document ID:
                collection.setId(document.getId());
                result.add(collection);
            }
            return result;
        } catch (ExecutionException | InterruptedException e) {
            throw new RuntimeException("Error while getting list of collections from Firestore!", e);
        }
    }

    public List<CollectionFilm> getCollectionsByUserId(String userId) {
        // Gi·∫£ s·ª≠ b·∫°n c√≥ firestore db ·ªü ƒë√¢y
        CollectionReference collectionReference = db.collection("collections");

        // L·ªçc theo userId
        Query query = collectionReference.whereEqualTo("userId", userId);

        ApiFuture<QuerySnapshot> querySnapshot = query.get();

        List<CollectionFilm> result = new ArrayList<>();
        try {
            for (DocumentSnapshot document : querySnapshot.get().getDocuments()) {
                CollectionFilm collectionFilm = document.toObject(CollectionFilm.class);
                collectionFilm.setId(document.getId());  // G√°n document ID
                result.add(collectionFilm);
            }
        } catch (InterruptedException | ExecutionException e) {
            throw new RuntimeException(e);
        }
        return result;
    }

    public List<Movie> getFilmsByCollectionId(String collectionId) {
        CollectionReference filmsRef = db.collection("collections")
                .document(collectionId)
                .collection("list_film");

        ApiFuture<QuerySnapshot> querySnapshot = filmsRef.get();

        List<Movie> result = new ArrayList<>();
        try {
            for (DocumentSnapshot document : querySnapshot.get().getDocuments()) {
                Movie film = document.toObject(Movie.class);
                result.add(film);
            }
        } catch (InterruptedException | ExecutionException e) {
            throw new RuntimeException(e);
        }
        return result;
    }

    public String addFilmToCollection(String collectionId, Movie film) throws ExecutionException, InterruptedException {
        // Tham chi·∫øu t·ªõi collection con 'list_film' trong document 'collections/collectionId'
        CollectionReference filmsRef = db.collection("collections")
                .document(collectionId)
                .collection("list_film");

        // Ki·ªÉm tra slug phim ƒë√£ t·ªìn t·∫°i trong b·ªô s∆∞u t·∫≠p ch∆∞a
        Query query = filmsRef.whereEqualTo("slug", film.getSlug());
        ApiFuture<QuerySnapshot> querySnapshot = query.get();

        if (!querySnapshot.get().isEmpty()) {
            return "Phim ƒë√£ t·ªìn t·∫°i trong b·ªô s∆∞u t·∫≠p.";
        }

        // Th√™m phim m·ªõi v√†o b·ªô s∆∞u t·∫≠p
        filmsRef.add(film);

        return "Phim ƒë√£ ƒë∆∞·ª£c th√™m v√†o b·ªô s∆∞u t·∫≠p.";
    }


    public boolean isFilmInCollection(String collectionId, String slug) {
        CollectionReference filmsRef = db.collection("collections")
                .document(collectionId)
                .collection("list_film");

        try {
            Query query = filmsRef.whereEqualTo("slug", slug);
            ApiFuture<QuerySnapshot> querySnapshot = query.get();

            return !querySnapshot.get().isEmpty();
        } catch (InterruptedException | ExecutionException e) {
            throw new RuntimeException("L·ªói khi ki·ªÉm tra phim trong b·ªô s∆∞u t·∫≠p: " + e.getMessage());
        }
    }

    public boolean isFilmInAnyCollectionOfUser(String userId, String slug) {
        try {
            List<CollectionFilm> userCollections = getCollectionsByUserId(userId);
            System.out.println("‚úÖ T·ªïng s·ªë b·ªô s∆∞u t·∫≠p c·ªßa user " + userId + ": " + userCollections.size());

            for (CollectionFilm collection : userCollections) {
                String collectionId = collection.getId();
                System.out.println("üîç ƒêang ki·ªÉm tra collection: " + collectionId);

                // Truy v·∫•n subcollection list_film trong t·ª´ng collection
                CollectionReference filmsRef = db.collection("collections")
                        .document(collectionId)
                        .collection("list_film");

                Query query = filmsRef.whereEqualTo("slug", slug);
                ApiFuture<QuerySnapshot> future = query.get(); // B∆∞·ªõc 1: L·∫•y Future
                QuerySnapshot querySnapshot = future.get(10, TimeUnit.SECONDS); // B∆∞·ªõc 2: Ch·ªù k·∫øt qu·∫£ c√≥ timeout

                List<QueryDocumentSnapshot> docs = querySnapshot.getDocuments();
                System.out.println("üîé S·ªë phim c√≥ slug '" + slug + "' trong collection " + collectionId + ": " + docs.size());

                if (!docs.isEmpty()) {
                    System.out.println("‚úÖ T√¨m th·∫•y phim c√≥ slug '" + slug + "' trong collection " + collectionId);
                    return true;
                }
            }

            System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y phim '" + slug + "' trong b·∫•t k·ª≥ b·ªô s∆∞u t·∫≠p n√†o c·ªßa user.");
            return false;

        } catch (InterruptedException | ExecutionException e) {
            throw new RuntimeException("üí• L·ªói khi ki·ªÉm tra phim trong b·ªô s∆∞u t·∫≠p: " + e.getMessage(), e);
        } catch (TimeoutException e) {
            throw new RuntimeException("‚è∞ Truy v·∫•n b·ªã timeout! C√≥ th·ªÉ Firestore qu√° t·∫£i ho·∫∑c qu√° nhi·ªÅu d·ªØ li·ªáu.", e);
        }
    }

    public boolean isCollectionExists(String collectionName, String userId) {
        try {
            CollectionReference collectionRef = db.collection("collections");
            Query query = collectionRef
                    .whereEqualTo("collection_name", collectionName)
                    .whereEqualTo("userId", userId);

            ApiFuture<QuerySnapshot> future = query.get();
            QuerySnapshot querySnapshot = future.get();

            return !querySnapshot.isEmpty();
        } catch (InterruptedException | ExecutionException e) {
            throw new RuntimeException("L·ªói khi ki·ªÉm tra collection t·ªìn t·∫°i: " + e.getMessage(), e);
        }
    }


    public String addCollection(CollectionFilm collectionFilm, String userId) {
        if (userId == null || userId.isEmpty()) {
            throw new IllegalArgumentException("UserId kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
        collectionFilm.setUserId(userId);  // ƒë·∫£m b·∫£o g√°n userId
        try {
            ApiFuture<DocumentReference> future = db.collection("collections").add(collectionFilm);
            String newId = future.get().getId();
            collectionFilm.setId(newId);
            return "Th√™m b·ªô s∆∞u t·∫≠p th√†nh c√¥ng";
        } catch (InterruptedException | ExecutionException e) {
            throw new RuntimeException("L·ªói khi th√™m b·ªô s∆∞u t·∫≠p: " + e.getMessage(), e);
        }
    }

    public String deleteCollection(String collectionId) {
        try {
            System.out.println("üî• ƒêang x√≥a collectionId: " + collectionId);

            // Xo√° to√†n b·ªô phim trong subcollection list_film tr∆∞·ªõc
            CollectionReference filmsRef = db.collection("collections")
                    .document(collectionId)
                    .collection("list_film");

            ApiFuture<QuerySnapshot> filmSnapshot = filmsRef.get();
            List<QueryDocumentSnapshot> filmDocs = filmSnapshot.get().getDocuments();

            for (QueryDocumentSnapshot doc : filmDocs) {
                System.out.println("‚û°Ô∏è Xo√° phim: " + doc.getId());
                filmsRef.document(doc.getId()).delete();
            }

            // X√≥a collection ch√≠nh
            ApiFuture<WriteResult> writeResult = db.collection("collections")
                    .document(collectionId)
                    .delete();

            System.out.println("‚úÖ ƒê√£ x√≥a collectionId: " + collectionId);
            return "X√≥a b·ªô s∆∞u t·∫≠p th√†nh c√¥ng";
        } catch (InterruptedException | ExecutionException e) {
            System.err.println("üí• L·ªói khi x√≥a b·ªô s∆∞u t·∫≠p: " + e.getMessage());
            throw new RuntimeException("L·ªói khi x√≥a b·ªô s∆∞u t·∫≠p: " + e.getMessage(), e);
        }
    }


    public String deleteFilmFromCollection(String collectionId, String slug) {
        try {
            System.out.println("üõ† ƒêang x√≥a phim v·ªõi slug = " + slug + " trong collectionId = " + collectionId);

            if (slug == null || slug.trim().isEmpty()) {
                return "Slug kh√¥ng h·ª£p l·ªá.";
            }

            CollectionReference filmsRef = db.collection("collections")
                    .document(collectionId)
                    .collection("list_film");

            // Truy v·∫•n phim theo slug
            Query query = filmsRef.whereEqualTo("slug", slug);
            ApiFuture<QuerySnapshot> querySnapshot = query.get();
            List<QueryDocumentSnapshot> docs = querySnapshot.get().getDocuments();

            if (docs.isEmpty()) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y slug: " + slug);
                return "Kh√¥ng t√¨m th·∫•y phim trong b·ªô s∆∞u t·∫≠p.";
            }

            for (QueryDocumentSnapshot doc : docs) {
                System.out.println("‚úÖ X√≥a phim documentId: " + doc.getId());
                filmsRef.document(doc.getId()).delete(); // kh√¥ng c·∫ßn ƒë·ª£i, async l√† ƒë·ªß
            }

            return "X√≥a phim kh·ªèi b·ªô s∆∞u t·∫≠p th√†nh c√¥ng";
        } catch (InterruptedException | ExecutionException e) {
            System.err.println("üí• L·ªói Firestore khi x√≥a phim: " + e.getMessage());
            throw new RuntimeException("L·ªói khi x√≥a phim kh·ªèi b·ªô s∆∞u t·∫≠p: " + e.getMessage(), e);
        }
    }
}
